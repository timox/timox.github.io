@@ class KanbanManager {
-  calculerPriorite(urgence, impact) {
-    let score = 50;
-    if (!urgence && !impact) return score;
-    if (urgence) {
-      if (urgence.toLowerCase().startsWith('imm')) score -= 20;
-      else if (urgence.toLowerCase().startsWith('cour')) score -= 10;
-      else if (urgence.toLowerCase().startsWith('moy')) score += 0;
-      else if (urgence.toLowerCase().startsWith('long')) score += 10;
-    }
-    if (impact) {
-      if (impact.toLowerCase().startsWith('crit')) score -= 15;
-      else if (impact.toLowerCase().startsWith('imp')) score -= 5;
-      else if (impact.toLowerCase().startsWith('mod')) score += 0;
-      else if (impact.toLowerCase().startsWith('min')) score += 8;
-    }
-    return score;
-  }
+  // Calcul de la priorité selon la règle fournie
+  calculerPriorite(u, i) {
+    const imp = String(i || '').trim().toLowerCase();
+    const urg = String(u || '').trim().toLowerCase();
+    if (imp === 'critique') return 1;
+    if (imp === 'important') return (urg === 'immédiate' || urg === 'courte') ? 1 : 2;
+    if (imp === 'modéré') return (urg === 'immédiate') ? 2 : 3;
+    if (imp === 'mineur') return 4;
+    return 3;
+  }
+
+  getPrioriteLibelle(u, i) {
+    const prio = this.calculerPriorite(u, i);
+    if (prio === 1) return "Priorité 1";
+    if (prio === 2) return "Priorité 2";
+    if (prio === 3) return "Priorité 3";
+    if (prio === 4) return "Priorité 4";
+    return "";
+  }
+
+  getStrategieTooltip(record) {
+    let tooltip = "";
+    if (record.strategie_id) tooltip += `ID: ${record.strategie_id}\n`;
+    if (record.strategie_action) tooltip += `Action: ${record.strategie_action}\n`;
+    if (record.strategie_objectif) tooltip += `Objectif: ${record.strategie_objectif}`;
+    return tooltip.trim();
+  }
@@
-  createTaskElementHTML(record) {
-    let delaiHTML = '';
-    if (record.delai) {
-      const status = this.getDelaiStatus(record.delai);
-      delaiHTML = `<div class="delai-indicator ${status}">
-        <i class="bi bi-calendar-event me-1"></i>${this.formatDelai(record.delai)}
-      </div>`;
-    }
-    let urgenceBadge = '';
-    if (record.urgence) {
-      const u = record.urgence.toLowerCase();
-      let cls = '';
-      if (u === 'immédiate' || u === 'immediate') cls = 'priority-badge priority-immediate';
-      else if (u === 'courte') cls = 'priority-badge priority-courte';
-      else if (u === 'moyenne') cls = 'priority-badge priority-moyenne';
-      else if (u === 'longue') cls = 'priority-badge priority-longue';
-      urgenceBadge = `<span class="${cls}">${record.urgence}</span>`;
-    }
-    let impactBadge = '';
-    if (record.impact) {
-      const i = record.impact.toLowerCase();
-      let cls = '';
-      if (i === 'critique') cls = 'impact-badge impact-critique';
-      else if (i === 'important') cls = 'impact-badge impact-important';
-      else if (i === 'modéré') cls = 'impact-badge impact-modéré';
-      else if (i === 'mineur') cls = 'impact-badge impact-mineur';
-      impactBadge = `<span class="${cls}">${record.impact}</span>`;
-    }
-    let projetTag = '';
-    if (record.projet) {
-      projetTag = `<span class="badge bg-info text-dark">${record.projet}</span>`;
-    }
-    let bureaux = '';
-    if (Array.isArray(record.bureau) && record.bureau.length > 1) {
-      bureaux = record.bureau.slice(1).map(b => `<span class="badge bg-secondary">${b}</span>`).join(' ');
-    }
-    let qui = '';
-    if (Array.isArray(record.qui) && record.qui.length > 1) {
-      qui = record.qui.slice(1).map(q => `<span class="assignee-avatar">${q[0]}</span>`).join(' ');
-    }
-    let desc = '';
-    if (record.description) {
-      desc = `<div class="item-description">${record.description}</div>`;
-    }
-    return `<div class="kanban-item" data-id="${record.id}">
-      <div class="item-title">${record.titre || ''}</div>
-      ${desc}
-      <div class="item-meta">
-        <div class="item-badges">
-          ${urgenceBadge} ${impactBadge} ${projetTag} ${bureaux}
-        </div>
-        <div class="item-assignees">${qui}</div>
-      </div>
-      ${delaiHTML}
-    </div>`;
-  }
+  createTaskElementHTML(record) {
+    // Priorité unique (calculée)
+    const prio = this.calculerPriorite(record.urgence, record.impact);
+    let prioBadge = `<span class="priority-badge priority-${prio}">P${prio}</span>`;
+    // Tag projet avec tooltip stratégie
+    let projetTag = '';
+    if (record.projet) {
+      const tooltip = this.getStrategieTooltip(record);
+      projetTag = `<span class="badge bg-info text-dark" title="${tooltip.replace(/"/g, '&quot;')}">${record.projet}</span>`;
+    }
+    // Icône délai si présent
+    let delaiIcon = '';
+    if (record.delai) {
+      delaiIcon = `<span class="delai-indicator" title="Date butoir : ${this.formatDelai(record.delai)}">
+        <i class="bi bi-calendar-event"></i>
+      </span>`;
+    }
+    return `<div class="kanban-item" data-id="${record.id}">
+      <div class="d-flex justify-content-between align-items-center">
+        <div>${prioBadge}</div>
+        <div>
+          ${projetTag}
+          ${delaiIcon}
+        </div>
+      </div>
+      <div class="item-title editable-zone">${record.titre || ''}</div>
+    </div>`;
+  }
@@
-  openPopup(tache = {}) {
-    if (!this.modal || !this.modalElement) { displayError("Ouverture dialogue impossible."); return; }
-    const isNewTask = !tache.id;
-    console.log("Ouverture popup ID:", tache.id, " (Nouvelle tâche:", isNewTask, ")");
-    this.currentTaskId = tache.id || null;
-    const trySet = (id, value) => { const el = document.getElementById(id); if (el) el.value = value || ""; };
-    const trySetText = (id, value) => { const el = document.getElementById(id); if (el) el.value = value || ""; };
-    trySet('popup-id', tache.id || '');
-    trySet('popup-titre', tache.titre || '');
-    trySet('popup-description', tache.description || '');
-    trySetText('popup-statut-text', tache.statut || (isNewTask ? (STATUTS[0]?.id || '') : '')); // Correction
-    trySet('popup-projet', tache.projet || '');
-    trySet('popup-urgence', tache.urgence || '');
-    trySet('popup-impact', tache.impact || '');
-    this.setSelectedOptions('popup-bureau', tache.bureau);
-    this.setSelectedOptions('popup-qui', tache.qui);
-    try { if (this.modal.show) this.modal.show(); else if ($?.fn?.modal) $(this.modalElement).modal('show'); else throw new Error("show modal absente."); console.log("Modal affiché."); } catch (e) { console.error("Erreur affichage modal:", e); displayError("Affichage dialogue impossible."); }
-  }
+  openPopup(tache = {}) {
+    if (!this.modal || !this.modalElement) { displayError("Ouverture dialogue impossible."); return; }
+    const isNewTask = !tache.id;
+    this.currentTaskId = tache.id || null;
+    const trySet = (id, value) => { const el = document.getElementById(id); if (el) el.value = value || ""; };
+    trySet('popup-id', tache.id || '');
+    trySet('popup-titre', tache.titre || '');
+    trySet('popup-description', tache.description || '');
+    trySet('popup-statut-text', tache.statut || (isNewTask ? (STATUTS[0]?.id || '') : ''));
+    trySet('popup-projet', tache.projet || '');
+    trySet('popup-urgence', tache.urgence || '');
+    trySet('popup-impact', tache.impact || '');
+    trySet('popup-strategie-id', tache.strategie_id || '');
+    trySet('popup-strategie-action', tache.strategie_action || '');
+    trySet('popup-strategie-objectif', tache.strategie_objectif || '');
+    this.setSelectedOptions('popup-bureau', tache.bureau);
+    this.setSelectedOptions('popup-qui', tache.qui);
+    // Affichage équipes/personnes
+    const eqDiv = document.getElementById('affectation-equipes');
+    const persDiv = document.getElementById('affectation-personnes');
+    if (eqDiv && persDiv) {
+      eqDiv.innerHTML = (Array.isArray(tache.bureau) && tache.bureau.length > 1)
+        ? tache.bureau.slice(1).map(b => `<span class="badge bg-secondary me-1">${b}</span>`).join(' ')
+        : '<span class="text-muted">Aucune équipe</span>';
+      persDiv.innerHTML = (Array.isArray(tache.qui) && tache.qui.length > 1)
+        ? tache.qui.slice(1).map(q => `<span class="badge bg-primary me-1">${q}</span>`).join(' ')
+        : '<span class="text-muted">Aucune personne</span>';
+    }
+    try { if (this.modal.show) this.modal.show(); else if ($?.fn?.modal) $(this.modalElement).modal('show'); else throw new Error("show modal absente."); } catch (e) { displayError("Affichage dialogue impossible."); }
+  }
@@
-  async saveTask() {
-    // ...
-    const row = {
-      titre, description, statut, projet, urgence, impact,
-      bureau: ['L', ...bureau],
-      qui: ['L', ...qui],
-      delai: delaiValue
-    };
+  async saveTask() {
+    // ...
+    const strategie_id = document.getElementById('popup-strategie-id').value;
+    const strategie_action = document.getElementById('popup-strategie-action').value;
+    const strategie_objectif = document.getElementById('popup-strategie-objectif').value;
+    const row = {
+      titre, description, statut, projet, urgence, impact,
+      bureau: ['L', ...bureau],
+      qui: ['L', ...qui],
+      delai: delaiValue,
+      strategie_id, strategie_action, strategie_objectif
+    };
@@ (rien à changer pour le reste)
patch
